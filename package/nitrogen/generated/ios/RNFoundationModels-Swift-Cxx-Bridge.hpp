///
/// RNFoundationModels-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `HybridFMLanguageModelSessionSpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridFMLanguageModelSessionSpec; }
// Forward declaration of `HybridFoundationModelsSpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridFoundationModelsSpec; }
// Forward declaration of `HybridLanguageModelSessionFactorySpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridLanguageModelSessionFactorySpec; }
// Forward declaration of `HybridToolBridgeSpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridToolBridgeSpec; }
// Forward declaration of `HybridToolFactorySpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridToolFactorySpec; }
// Forward declaration of `HybridToolSpec` to properly resolve imports.
namespace margelo::nitro::rnappleai { class HybridToolSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridFMLanguageModelSessionSpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridFMLanguageModelSessionSpec_cxx; }
// Forward declaration of `HybridFoundationModelsSpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridFoundationModelsSpec_cxx; }
// Forward declaration of `HybridLanguageModelSessionFactorySpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridLanguageModelSessionFactorySpec_cxx; }
// Forward declaration of `HybridToolBridgeSpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridToolBridgeSpec_cxx; }
// Forward declaration of `HybridToolFactorySpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridToolFactorySpec_cxx; }
// Forward declaration of `HybridToolSpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridToolSpec_cxx; }

// Include C++ defined types
#include "HybridFMLanguageModelSessionSpec.hpp"
#include "HybridFoundationModelsSpec.hpp"
#include "HybridLanguageModelSessionFactorySpec.hpp"
#include "HybridToolBridgeSpec.hpp"
#include "HybridToolFactorySpec.hpp"
#include "HybridToolSpec.hpp"
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::rnappleai::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<std::string>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::string>>`.
   */
  using std__shared_ptr_Promise_std__string__ = std::shared_ptr<Promise<std::string>>;
  inline std::shared_ptr<Promise<std::string>> create_std__shared_ptr_Promise_std__string__() {
    return Promise<std::string>::create();
  }
  inline PromiseHolder<std::string> wrap_std__shared_ptr_Promise_std__string__(std::shared_ptr<Promise<std::string>> promise) {
    return PromiseHolder<std::string>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::string& /* result */)>>(std::move(func))) {}
    inline void call(std::string result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::string& /* result */)>> _function;
  };
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::string>>>
  using Result_std__shared_ptr_Promise_std__string___ = Result<std::shared_ptr<Promise<std::string>>>;
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::shared_ptr<Promise<std::string>>& value) {
    return Result<std::shared_ptr<Promise<std::string>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::string>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>& strong) { return strong; }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridToolSpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridToolSpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridToolSpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridToolSpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>& strong) { return strong; }
  
  // pragma MARK: std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>
  /**
   * Specialized version of `std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>`.
   */
  using std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ = std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>;
  inline std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>> create_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__(size_t size) {
    std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>>
  /**
   * Specialized version of `std::optional<std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>>`.
   */
  using std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___ = std::optional<std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>>;
  inline std::optional<std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>> create_std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___(const std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>& value) {
    return std::optional<std::vector<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridLanguageModelSessionFactorySpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridLanguageModelSessionFactorySpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>>
  using Result_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec__ = Result<std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>>;
  inline Result_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec__ create_Result_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec__(const std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>& value) {
    return Result<std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>>::withValue(value);
  }
  inline Result_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec__ create_Result_std__shared_ptr_margelo__nitro__rnappleai__HybridFMLanguageModelSessionSpec__(const std::exception_ptr& error) {
    return Result<std::shared_ptr<margelo::nitro::rnappleai::HybridFMLanguageModelSessionSpec>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_AnyMap___ = std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> create_std__shared_ptr_Promise_std__shared_ptr_AnyMap___() {
    return Promise<std::shared_ptr<AnyMap>>::create();
  }
  inline PromiseHolder<std::shared_ptr<AnyMap>> wrap_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> promise) {
    return PromiseHolder<std::shared_ptr<AnyMap>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<AnyMap>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<AnyMap>&)>`.
   */
  using Func_void_std__shared_ptr_AnyMap_ = std::function<void(const std::shared_ptr<AnyMap>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<AnyMap>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_AnyMap__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_AnyMap__Wrapper(std::function<void(const std::shared_ptr<AnyMap>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::shared_ptr<AnyMap>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<AnyMap> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::shared_ptr<AnyMap>& /* result */)>> _function;
  };
  Func_void_std__shared_ptr_AnyMap_ create_Func_void_std__shared_ptr_AnyMap_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__shared_ptr_AnyMap__Wrapper wrap_Func_void_std__shared_ptr_AnyMap_(Func_void_std__shared_ptr_AnyMap_ value) {
    return Func_void_std__shared_ptr_AnyMap__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>
  /**
   * Specialized version of `std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>&)>`.
   */
  using Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap_ = std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>;
  /**
   * Wrapper class for a `std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& / * args * /)>`, this can be used from Swift.
   */
  class Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap__Wrapper final {
  public:
    explicit Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap__Wrapper(std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>&& func): _function(std::make_shared<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>>(std::move(func))) {}
    inline std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>> call(std::shared_ptr<AnyMap> args) const {
      auto __result = _function->operator()(args);
      return __result;
    }
  private:
    std::shared_ptr<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>> _function;
  };
  Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap_ create_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap_(void* _Nonnull swiftClosureWrapper);
  inline Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap__Wrapper wrap_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap_(Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap_ value) {
    return Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap______std__shared_ptr_AnyMap__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap_____ = std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>> create_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap_____() {
    return Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>::create();
  }
  inline PromiseHolder<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>> wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_AnyMap_____(std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>> promise) {
    return PromiseHolder<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>&)>`.
   */
  using Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap___ = std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap____Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap____Wrapper(std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>& /* result */)>> _function;
  };
  Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap___ create_Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap____Wrapper wrap_Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap___ value) {
    return Func_void_std__shared_ptr_Promise_std__shared_ptr_AnyMap____Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>& strong) { return strong; }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_ = std::shared_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>;
  std::shared_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>
  using std__weak_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_ = std::weak_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>;
  inline std__weak_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_ weakify_std__shared_ptr_margelo__nitro__rnappleai__HybridToolFactorySpec_(const std::shared_ptr<margelo::nitro::rnappleai::HybridToolFactorySpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>
  using Result_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ = Result<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>;
  inline Result_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ create_Result_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__(const std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>& value) {
    return Result<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>::withValue(value);
  }
  inline Result_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ create_Result_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__(const std::exception_ptr& error) {
    return Result<std::shared_ptr<margelo::nitro::rnappleai::HybridToolSpec>>::withError(error);
  }

} // namespace margelo::nitro::rnappleai::bridge::swift
