///
/// HybridToolBridgeSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridToolBridgeSpec.hpp"

// Forward declaration of `HybridToolBridgeSpec_cxx` to properly resolve imports.
namespace RNFoundationModels { class HybridToolBridgeSpec_cxx; }

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <functional>
#include <NitroModules/Promise.hpp>
#include <NitroModules/AnyMap.hpp>

#include "RNFoundationModels-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::rnappleai {

  /**
   * The C++ part of HybridToolBridgeSpec_cxx.swift.
   *
   * HybridToolBridgeSpecSwift (C++) accesses HybridToolBridgeSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridToolBridgeSpec_cxx can directly inherit from the C++ class HybridToolBridgeSpec
   * to simplify the whole structure and memory management.
   */
  class HybridToolBridgeSpecSwift: public virtual HybridToolBridgeSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridToolBridgeSpecSwift(const RNFoundationModels::HybridToolBridgeSpec_cxx& swiftPart):
      HybridObject(HybridToolBridgeSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline RNFoundationModels::HybridToolBridgeSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void registerJSFunction(const std::string& name, const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* args */)>& implementation) override {
      auto __result = _swiftPart.registerJSFunction(name, implementation);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    RNFoundationModels::HybridToolBridgeSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::rnappleai
