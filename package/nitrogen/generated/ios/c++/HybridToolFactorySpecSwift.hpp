///
/// HybridToolFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridToolFactorySpec.hpp"

// Forward declaration of `HybridToolFactorySpec_cxx` to properly resolve imports.
namespace RNAppleAI { class HybridToolFactorySpec_cxx; }

// Forward declaration of `HybridTool` to properly resolve imports.
namespace margelo::nitro::rnappleai { struct HybridTool; }
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `ToolConfig` to properly resolve imports.
namespace margelo::nitro::rnappleai { struct ToolConfig; }

#include "HybridTool.hpp"
#include <string>
#include <NitroModules/AnyMap.hpp>
#include "ToolConfig.hpp"
#include <functional>
#include <NitroModules/Promise.hpp>

#include "RNAppleAI-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::rnappleai {

  /**
   * The C++ part of HybridToolFactorySpec_cxx.swift.
   *
   * HybridToolFactorySpecSwift (C++) accesses HybridToolFactorySpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridToolFactorySpec_cxx can directly inherit from the C++ class HybridToolFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridToolFactorySpecSwift: public virtual HybridToolFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridToolFactorySpecSwift(const RNAppleAI::HybridToolFactorySpec_cxx& swiftPart):
      HybridObject(HybridToolFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline RNAppleAI::HybridToolFactorySpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline HybridTool create(const ToolConfig& config) override {
      auto __result = _swiftPart.create(config);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    RNAppleAI::HybridToolFactorySpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::rnappleai
