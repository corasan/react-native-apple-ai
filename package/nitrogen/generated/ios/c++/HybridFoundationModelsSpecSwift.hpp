///
/// HybridFoundationModelsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridFoundationModelsSpec.hpp"

// Forward declaration of `HybridFoundationModelsSpec_cxx` to properly resolve imports.
namespace RNAppleAI { class HybridFoundationModelsSpec_cxx; }



#include <NitroModules/Promise.hpp>
#include <string>
#include <optional>
#include <functional>

#include "RNAppleAI-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::rnappleai {

  /**
   * The C++ part of HybridFoundationModelsSpec_cxx.swift.
   *
   * HybridFoundationModelsSpecSwift (C++) accesses HybridFoundationModelsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridFoundationModelsSpec_cxx can directly inherit from the C++ class HybridFoundationModelsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridFoundationModelsSpecSwift: public virtual HybridFoundationModelsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridFoundationModelsSpecSwift(const RNAppleAI::HybridFoundationModelsSpec_cxx& swiftPart):
      HybridObject(HybridFoundationModelsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline RNAppleAI::HybridFoundationModelsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::string>> respond(const std::string& prompt, const std::optional<std::string>& generating) override {
      auto __result = _swiftPart.respond(prompt, generating);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> streamResponse(const std::string& prompt, const std::function<void(const std::string& /* stream */)>& onStream, const std::optional<std::string>& generating) override {
      auto __result = _swiftPart.streamResponse(prompt, onStream, generating);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    RNAppleAI::HybridFoundationModelsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::rnappleai
