///
/// RNAppleAI-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "RNAppleAI-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridFoundationModelsSpecSwift.hpp"
#include "HybridToolBridgeSpecSwift.hpp"
#include "RNAppleAI-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::rnappleai::bridge::swift {

  // pragma MARK: std::function<void(const std::string& /* result */)>
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = RNAppleAI::Func_void_std__string::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::string& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = RNAppleAI::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec>
  std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_(void* _Nonnull swiftUnsafePointer) {
    RNAppleAI::HybridFoundationModelsSpec_cxx swiftPart = RNAppleAI::HybridFoundationModelsSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::rnappleai::HybridFoundationModelsSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridFoundationModelsSpec_ cppType) {
    std::shared_ptr<margelo::nitro::rnappleai::HybridFoundationModelsSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::rnappleai::HybridFoundationModelsSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridFoundationModelsSpec\" is not implemented in Swift!");
    }
  #endif
    RNAppleAI::HybridFoundationModelsSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>()>
  Func_std__shared_ptr_Promise_std__shared_ptr_AnyMap___ create_Func_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = RNAppleAI::Func_std__shared_ptr_Promise_std__shared_ptr_AnyMap___::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)]() mutable -> std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> {
      auto __result = swiftClosure.call();
      return __result;
    };
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<AnyMap>& /* result */)>
  Func_void_std__shared_ptr_AnyMap_ create_Func_void_std__shared_ptr_AnyMap_(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = RNAppleAI::Func_void_std__shared_ptr_AnyMap_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<AnyMap>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec>
  std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpec> create_std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_(void* _Nonnull swiftUnsafePointer) {
    RNAppleAI::HybridToolBridgeSpec_cxx swiftPart = RNAppleAI::HybridToolBridgeSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::rnappleai::HybridToolBridgeSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_(std__shared_ptr_margelo__nitro__rnappleai__HybridToolBridgeSpec_ cppType) {
    std::shared_ptr<margelo::nitro::rnappleai::HybridToolBridgeSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::rnappleai::HybridToolBridgeSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridToolBridgeSpec\" is not implemented in Swift!");
    }
  #endif
    RNAppleAI::HybridToolBridgeSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::rnappleai::bridge::swift
