///
/// HybridToolSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridToolSpec``
public protocol HybridToolSpec_protocol: HybridObject {
  // Properties
  var name: String { get }
  var description: String { get }
  var arguments: AnyMapHolder { get }

  // Methods
  func call() throws -> Promise<AnyMapHolder>
}

/// See ``HybridToolSpec``
public class HybridToolSpec_base {
  private weak var cxxWrapper: HybridToolSpec_cxx? = nil
  public func getCxxWrapper() -> HybridToolSpec_cxx {
  #if DEBUG
    guard self is HybridToolSpec else {
      fatalError("`self` is not a `HybridToolSpec`! Did you accidentally inherit from `HybridToolSpec_base` instead of `HybridToolSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridToolSpec_cxx(self as! HybridToolSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Tool HybridObject.
 * Implement this protocol to create Swift-based instances of Tool.
 * ```swift
 * class HybridTool : HybridToolSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridToolSpec = HybridToolSpec_protocol & HybridToolSpec_base
