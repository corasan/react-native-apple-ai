///
/// HybridLanguageModelSessionFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridLanguageModelSessionFactorySpec``
public protocol HybridLanguageModelSessionFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createSession(config: LanguageModelSessionConfig) throws -> FMLanguageModelSession
}

/// See ``HybridLanguageModelSessionFactorySpec``
public class HybridLanguageModelSessionFactorySpec_base {
  private weak var cxxWrapper: HybridLanguageModelSessionFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridLanguageModelSessionFactorySpec_cxx {
  #if DEBUG
    guard self is HybridLanguageModelSessionFactorySpec else {
      fatalError("`self` is not a `HybridLanguageModelSessionFactorySpec`! Did you accidentally inherit from `HybridLanguageModelSessionFactorySpec_base` instead of `HybridLanguageModelSessionFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridLanguageModelSessionFactorySpec_cxx(self as! HybridLanguageModelSessionFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the LanguageModelSessionFactory HybridObject.
 * Implement this protocol to create Swift-based instances of LanguageModelSessionFactory.
 * ```swift
 * class HybridLanguageModelSessionFactory : HybridLanguageModelSessionFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridLanguageModelSessionFactorySpec = HybridLanguageModelSessionFactorySpec_protocol & HybridLanguageModelSessionFactorySpec_base
