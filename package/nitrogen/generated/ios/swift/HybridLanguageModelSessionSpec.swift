///
/// HybridLanguageModelSessionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridLanguageModelSessionSpec``
public protocol HybridLanguageModelSessionSpec_protocol: HybridObject {
  // Properties
  var wasContextReset: Bool { get }

  // Methods
  func streamResponse(prompt: String, onStream: @escaping (_ stream: String) -> Void) throws -> Promise<String>
}

/// See ``HybridLanguageModelSessionSpec``
public class HybridLanguageModelSessionSpec_base {
  private weak var cxxWrapper: HybridLanguageModelSessionSpec_cxx? = nil
  public func getCxxWrapper() -> HybridLanguageModelSessionSpec_cxx {
  #if DEBUG
    guard self is HybridLanguageModelSessionSpec else {
      fatalError("`self` is not a `HybridLanguageModelSessionSpec`! Did you accidentally inherit from `HybridLanguageModelSessionSpec_base` instead of `HybridLanguageModelSessionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridLanguageModelSessionSpec_cxx(self as! HybridLanguageModelSessionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the LanguageModelSession HybridObject.
 * Implement this protocol to create Swift-based instances of LanguageModelSession.
 * ```swift
 * class HybridLanguageModelSession : HybridLanguageModelSessionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridLanguageModelSessionSpec = HybridLanguageModelSessionSpec_protocol & HybridLanguageModelSessionSpec_base
