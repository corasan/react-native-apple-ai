///
/// Tool.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Tool`, backed by a C++ struct.
 */
public typealias Tool = margelo.nitro.rnappleai.Tool

public extension Tool {
  private typealias bridge = margelo.nitro.rnappleai.bridge.swift

  /**
   * Create a new instance of `Tool`.
   */
  init(name: String, description: String, arguments: AnyMapHolder, implementation: Promise<AnyMapHolder>) {
    self.init(std.string(name), std.string(description), arguments.cppPart, { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_AnyMap___ in
      let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_AnyMap___()
      let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(__promise)
      implementation
        .then({ __result in __promiseHolder.resolve(__result.cppPart) })
        .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
      return __promise
    }())
  }

  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
  
  var description: String {
    @inline(__always)
    get {
      return String(self.__description)
    }
    @inline(__always)
    set {
      self.__description = std.string(newValue)
    }
  }
  
  var arguments: AnyMapHolder {
    @inline(__always)
    get {
      return AnyMapHolder(withCppPart: self.__arguments)
    }
    @inline(__always)
    set {
      self.__arguments = newValue.cppPart
    }
  }
  
  var implementation: Promise<AnyMapHolder> {
    @inline(__always)
    get {
      return { () -> Promise<AnyMapHolder> in
        let __promise = Promise<AnyMapHolder>()
        let __resolver = { (__result: AnyMapHolder) in
          __promise.resolve(withResult: __result)
        }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_AnyMap_ in
          let __closureWrapper = Func_void_std__shared_ptr_AnyMap_(__resolver)
          return bridge.create_Func_void_std__shared_ptr_AnyMap_(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(self.__implementation)
        __promiseHolder.addOnResolvedListener(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }()
    }
    @inline(__always)
    set {
      self.__implementation = { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_AnyMap___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_AnyMap___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_AnyMap___(__promise)
        newValue
          .then({ __result in __promiseHolder.resolve(__result.cppPart) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
    }
  }
}
