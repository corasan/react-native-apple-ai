///
/// HybridToolBridgeSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridToolBridgeSpec``
public protocol HybridToolBridgeSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func registerJSFunction(name: String, implementation: @escaping (_ args: AnyMapHolder) -> Promise<Promise<AnyMapHolder>>) throws -> Void
}

/// See ``HybridToolBridgeSpec``
public class HybridToolBridgeSpec_base {
  private weak var cxxWrapper: HybridToolBridgeSpec_cxx? = nil
  public func getCxxWrapper() -> HybridToolBridgeSpec_cxx {
  #if DEBUG
    guard self is HybridToolBridgeSpec else {
      fatalError("`self` is not a `HybridToolBridgeSpec`! Did you accidentally inherit from `HybridToolBridgeSpec_base` instead of `HybridToolBridgeSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridToolBridgeSpec_cxx(self as! HybridToolBridgeSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ToolBridge HybridObject.
 * Implement this protocol to create Swift-based instances of ToolBridge.
 * ```swift
 * class HybridToolBridge : HybridToolBridgeSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridToolBridgeSpec = HybridToolBridgeSpec_protocol & HybridToolBridgeSpec_base
