///
/// HybridToolFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridToolFactorySpec``
public protocol HybridToolFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func create(config: ToolConfig) throws -> (any HybridToolSpec)
}

/// See ``HybridToolFactorySpec``
public class HybridToolFactorySpec_base {
  private weak var cxxWrapper: HybridToolFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridToolFactorySpec_cxx {
  #if DEBUG
    guard self is HybridToolFactorySpec else {
      fatalError("`self` is not a `HybridToolFactorySpec`! Did you accidentally inherit from `HybridToolFactorySpec_base` instead of `HybridToolFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridToolFactorySpec_cxx(self as! HybridToolFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ToolFactory HybridObject.
 * Implement this protocol to create Swift-based instances of ToolFactory.
 * ```swift
 * class HybridToolFactory : HybridToolFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridToolFactorySpec = HybridToolFactorySpec_protocol & HybridToolFactorySpec_base
