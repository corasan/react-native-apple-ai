///
/// LanguageModelSessionConfig.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `LanguageModelSessionConfig`, backed by a C++ struct.
 */
public typealias LanguageModelSessionConfig = margelo.nitro.rnappleai.LanguageModelSessionConfig

public extension LanguageModelSessionConfig {
  private typealias bridge = margelo.nitro.rnappleai.bridge.swift

  /**
   * Create a new instance of `LanguageModelSessionConfig`.
   */
  init(instructions: String?, tools: [(any HybridToolSpec)]?) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = instructions {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___ in
      if let __unwrappedValue = tools {
        return bridge.create_std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___({ () -> bridge.std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ in
          var __vector = bridge.create_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back({ () -> bridge.std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_ in
              let __cxxWrapped = __item.getCxxWrapper()
              return __cxxWrapped.getCxxPart()
            }())
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }())
  }

  var instructions: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__instructions.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__instructions = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var tools: [(any HybridToolSpec)]? {
    @inline(__always)
    get {
      return { () -> [(any HybridToolSpec)]? in
        if let __unwrapped = self.__tools.value {
          return __unwrapped.map({ __item in { () -> HybridToolSpec in
            let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_(__item)
            let __instance = HybridToolSpec_cxx.fromUnsafe(__unsafePointer)
            return __instance.getHybridToolSpec()
          }() })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__tools = { () -> bridge.std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec___({ () -> bridge.std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__ in
            var __vector = bridge.create_std__vector_std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec__(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back({ () -> bridge.std__shared_ptr_margelo__nitro__rnappleai__HybridToolSpec_ in
                let __cxxWrapped = __item.getCxxWrapper()
                return __cxxWrapped.getCxxPart()
              }())
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
}
