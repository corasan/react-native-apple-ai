///
/// HybridFoundationModelsSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridFoundationModelsSpec``
public protocol HybridFoundationModelsSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func hello(name: String) throws -> String
  func add(a: Double, b: Double) throws -> Double
  func respond(generating: String, prompt: String) throws -> Promise<String>
}

/// See ``HybridFoundationModelsSpec``
public class HybridFoundationModelsSpec_base {
  private weak var cxxWrapper: HybridFoundationModelsSpec_cxx? = nil
  public func getCxxWrapper() -> HybridFoundationModelsSpec_cxx {
  #if DEBUG
    guard self is HybridFoundationModelsSpec else {
      fatalError("`self` is not a `HybridFoundationModelsSpec`! Did you accidentally inherit from `HybridFoundationModelsSpec_base` instead of `HybridFoundationModelsSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridFoundationModelsSpec_cxx(self as! HybridFoundationModelsSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the FoundationModels HybridObject.
 * Implement this protocol to create Swift-based instances of FoundationModels.
 * ```swift
 * class HybridFoundationModels : HybridFoundationModelsSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridFoundationModelsSpec = HybridFoundationModelsSpec_protocol & HybridFoundationModelsSpec_base
