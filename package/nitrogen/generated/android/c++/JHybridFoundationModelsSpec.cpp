///
/// JHybridFoundationModelsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridFoundationModelsSpec.hpp"



#include <string>
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::foundationmodels {

  jni::local_ref<JHybridFoundationModelsSpec::jhybriddata> JHybridFoundationModelsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridFoundationModelsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridFoundationModelsSpec::initHybrid),
    });
  }

  size_t JHybridFoundationModelsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridFoundationModelsSpec::hello(const std::string& name) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* name */)>("hello");
    auto __result = method(_javaPart, jni::make_jstring(name));
    return __result->toStdString();
  }
  double JHybridFoundationModelsSpec::add(double a, double b) {
    static const auto method = javaClassStatic()->getMethod<double(double /* a */, double /* b */)>("add");
    auto __result = method(_javaPart, a, b);
    return __result;
  }
  std::shared_ptr<Promise<std::string>> JHybridFoundationModelsSpec::respond(const std::string& generating) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* generating */)>("respond");
    auto __result = method(_javaPart, jni::make_jstring(generating));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::foundationmodels
