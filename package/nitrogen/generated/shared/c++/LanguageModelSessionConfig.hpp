///
/// LanguageModelSessionConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ToolDefinition` to properly resolve imports.
namespace margelo::nitro::rnappleai { struct ToolDefinition; }

#include <string>
#include <optional>
#include "ToolDefinition.hpp"
#include <vector>

namespace margelo::nitro::rnappleai {

  /**
   * A struct which can be represented as a JavaScript object (LanguageModelSessionConfig).
   */
  struct LanguageModelSessionConfig {
  public:
    std::optional<std::string> instructions     SWIFT_PRIVATE;
    std::optional<std::vector<ToolDefinition>> tools     SWIFT_PRIVATE;

  public:
    LanguageModelSessionConfig() = default;
    explicit LanguageModelSessionConfig(std::optional<std::string> instructions, std::optional<std::vector<ToolDefinition>> tools): instructions(instructions), tools(tools) {}
  };

} // namespace margelo::nitro::rnappleai

namespace margelo::nitro {

  // C++ LanguageModelSessionConfig <> JS LanguageModelSessionConfig (object)
  template <>
  struct JSIConverter<margelo::nitro::rnappleai::LanguageModelSessionConfig> final {
    static inline margelo::nitro::rnappleai::LanguageModelSessionConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::rnappleai::LanguageModelSessionConfig(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "instructions")),
        JSIConverter<std::optional<std::vector<margelo::nitro::rnappleai::ToolDefinition>>>::fromJSI(runtime, obj.getProperty(runtime, "tools"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::rnappleai::LanguageModelSessionConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "instructions", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.instructions));
      obj.setProperty(runtime, "tools", JSIConverter<std::optional<std::vector<margelo::nitro::rnappleai::ToolDefinition>>>::toJSI(runtime, arg.tools));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "instructions"))) return false;
      if (!JSIConverter<std::optional<std::vector<margelo::nitro::rnappleai::ToolDefinition>>>::canConvert(runtime, obj.getProperty(runtime, "tools"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
