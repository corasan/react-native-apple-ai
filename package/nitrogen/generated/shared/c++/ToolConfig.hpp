///
/// ToolConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <NitroModules/AnyMap.hpp>
#include <functional>
#include <NitroModules/Promise.hpp>

namespace margelo::nitro::rnappleai {

  /**
   * A struct which can be represented as a JavaScript object (ToolConfig).
   */
  struct ToolConfig {
  public:
    std::string name     SWIFT_PRIVATE;
    std::string description     SWIFT_PRIVATE;
    std::shared_ptr<AnyMap> arguments     SWIFT_PRIVATE;
    std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* params */)> call     SWIFT_PRIVATE;

  public:
    ToolConfig() = default;
    explicit ToolConfig(std::string name, std::string description, std::shared_ptr<AnyMap> arguments, std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* params */)> call): name(name), description(description), arguments(arguments), call(call) {}
  };

} // namespace margelo::nitro::rnappleai

namespace margelo::nitro {

  using namespace margelo::nitro::rnappleai;

  // C++ ToolConfig <> JS ToolConfig (object)
  template <>
  struct JSIConverter<ToolConfig> final {
    static inline ToolConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ToolConfig(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::shared_ptr<AnyMap>>::fromJSI(runtime, obj.getProperty(runtime, "arguments")),
        JSIConverter<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* params */)>>::fromJSI(runtime, obj.getProperty(runtime, "call"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ToolConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "description", JSIConverter<std::string>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "arguments", JSIConverter<std::shared_ptr<AnyMap>>::toJSI(runtime, arg.arguments));
      obj.setProperty(runtime, "call", JSIConverter<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* params */)>>::toJSI(runtime, arg.call));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::shared_ptr<AnyMap>>::canConvert(runtime, obj.getProperty(runtime, "arguments"))) return false;
      if (!JSIConverter<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<AnyMap>>>>>(const std::shared_ptr<AnyMap>& /* params */)>>::canConvert(runtime, obj.getProperty(runtime, "call"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
