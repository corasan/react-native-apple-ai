"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{3973:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"examples","title":"Examples","description":"Basic Chat Application","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/react-native-apple-ai/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/corasan/react-native-apple-ai/tree/main/docs/docs/examples.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/react-native-apple-ai/docs/api-reference"}}');var s=t(4848),a=t(8453);const o={sidebar_position:4},i="Examples",l={},c=[{value:"Basic Chat Application",id:"basic-chat-application",level:2},{value:"AI Assistant with Tools",id:"ai-assistant-with-tools",level:2},{value:"Streaming Chat Interface",id:"streaming-chat-interface",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-chat-application",children:"Basic Chat Application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, ScrollView } from 'react-native';\nimport { useLanguageModel } from 'react-native-apple-ai';\n\nexport default function ChatApp() {\n  const [messages, setMessages] = useState<Array<{role: 'user' | 'assistant', content: string}>>([]);\n  const [input, setInput] = useState('');\n\n  const { session, send, loading, isSessionReady, error } = useLanguageModel({\n    instructions: \"You are a helpful assistant.\",\n    onResponse: (response) => {\n      setMessages(prev => [...prev, { role: 'assistant', content: response }]);\n    },\n    onError: (error) => {\n      console.error('Chat error:', error);\n    }\n  });\n\n  const sendMessage = async () => {\n    if (!input.trim() || loading || !isSessionReady) return;\n\n    const userMessage = { role: 'user' as const, content: input };\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = input;\n    setInput('');\n\n    try {\n      await send(currentInput);\n    } catch (err) {\n      console.error('Error sending message:', err);\n      // Remove the user message if sending failed\n      setMessages(prev => prev.slice(0, -1));\n      setInput(currentInput); // Restore input\n    }\n  };\n\n  if (!isSessionReady) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>\n          {error ? `Error: ${error.message}` : 'Loading Apple Intelligence...'}\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, padding: 20 }}>\n      <ScrollView style={{ flex: 1, marginBottom: 10 }}>\n        {messages.map((message, index) => (\n          <View key={index} style={{ marginBottom: 10 }}>\n            <Text style={{ fontWeight: 'bold' }}>{message.role}:</Text>\n            <Text>{message.content}</Text>\n          </View>\n        ))}\n      </ScrollView>\n\n      <View style={{ flexDirection: 'row' }}>\n        <TextInput\n          style={{\n            flex: 1,\n            borderWidth: 1,\n            padding: 10,\n            marginRight: 10,\n            borderRadius: 5\n          }}\n          value={input}\n          onChangeText={setInput}\n          placeholder=\"Type a message...\"\n          editable={!loading}\n        />\n        <Button\n          title={loading ? \"Sending...\" : \"Send\"}\n          onPress={sendMessage}\n          disabled={loading || !input.trim()}\n        />\n      </View>\n    </View>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ai-assistant-with-tools",children:"AI Assistant with Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\nimport { z } from 'zod';\nimport { useLanguageModel, createTool } from 'react-native-apple-ai';\n\n// Define a weather tool\nconst weatherTool = createTool({\n  name: 'get_weather',\n  description: 'Get current weather for a location',\n  arguments: z.object({\n    location: z.string().describe('The city and state/country'),\n    unit: z.enum(['celsius', 'fahrenheit']).optional().default('celsius')\n  }),\n  handler: async ({ location, unit }) => {\n    // In a real app, you'd call a weather API\n    const temp = unit === 'celsius' ? '22\xb0C' : '72\xb0F';\n    return {\n      weather: `The weather in ${location} is sunny with a temperature of ${temp}.`,\n      temperature: temp,\n      condition: 'sunny'\n    };\n  }\n});\n\n// Define a calculator tool\nconst calculatorTool = createTool({\n  name: 'calculate',\n  description: 'Perform basic mathematical calculations',\n  arguments: z.object({\n    expression: z.string().describe('Mathematical expression to evaluate (e.g., \"2 + 2\")')\n  }),\n  handler: async ({ expression }) => {\n    try {\n      // Simple evaluation - in production, use a proper math parser\n      const result = eval(expression);\n      return {\n        result: `The result of ${expression} is ${result}`,\n        value: result\n      };\n    } catch (error) {\n      return {\n        result: `Error: Invalid mathematical expression`,\n        error: true\n      };\n    }\n  }\n});\n\nexport default function AIAssistant() {\n  const [response, setResponse] = useState('');\n\n  const { send, loading, isSessionReady, error } = useLanguageModel({\n    instructions: \"You are a helpful assistant with access to weather information and a calculator. Use the tools when appropriate.\",\n    tools: [weatherTool, calculatorTool],\n    onResponse: (response) => setResponse(response),\n    onError: (error) => console.error('AI Error:', error)\n  });\n\n  const askQuestion = async (question: string) => {\n    if (!isSessionReady) return;\n\n    try {\n      await send(question);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  if (!isSessionReady) {\n    return (\n      <View style={{ padding: 20 }}>\n        <Text>{error ? `Error: ${error.message}` : 'Loading...'}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ padding: 20 }}>\n      <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 20 }}>\n        AI Assistant with Tools\n      </Text>\n\n      <Text style={{ marginBottom: 20, minHeight: 100 }}>\n        {response || 'Ask me about the weather or give me a math problem!'}\n      </Text>\n\n      <Button\n        title=\"What's the weather in San Francisco?\"\n        onPress={() => askQuestion(\"What's the weather in San Francisco?\")}\n        disabled={loading}\n      />\n\n      <View style={{ marginVertical: 10 }} />\n\n      <Button\n        title=\"Calculate 15 * 24\"\n        onPress={() => askQuestion(\"Calculate 15 * 24\")}\n        disabled={loading}\n      />\n\n      <View style={{ marginVertical: 10 }} />\n\n      <Button\n        title=\"What's 2 + 2 and what's the weather in Tokyo?\"\n        onPress={() => askQuestion(\"What's 2 + 2 and what's the weather in Tokyo?\")}\n        disabled={loading}\n      />\n\n      {loading && <Text style={{ marginTop: 10 }}>Processing...</Text>}\n    </View>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"streaming-chat-interface",children:"Streaming Chat Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { View, Text, TextInput, Button } from 'react-native';\nimport { useLanguageModel, useStreamingResponse } from 'react-native-apple-ai';\n\nexport default function StreamingChat() {\n  const [input, setInput] = useState('');\n\n  const { session, isSessionReady, error: sessionError } = useLanguageModel({\n    instructions: \"You are a helpful assistant. Provide detailed responses.\"\n  });\n\n  const {\n    response,\n    isStreaming,\n    error: streamError,\n    streamResponse,\n    reset\n  } = useStreamingResponse(session!);\n\n  const handleStreamingMessage = async () => {\n    if (!session || !input.trim() || isStreaming) return;\n\n    const currentInput = input;\n    setInput('');\n    reset();\n\n    try {\n      await streamResponse(currentInput, {\n        onToken: (token) => {\n          // Response is automatically updated via the hook\n        },\n        onComplete: (fullResponse) => {\n          console.log('Streaming complete:', fullResponse);\n        },\n        onError: (error) => {\n          console.error('Streaming error:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Failed to start streaming:', error);\n      setInput(currentInput); // Restore input on error\n    }\n  };\n\n  if (!isSessionReady) {\n    return (\n      <View style={{ padding: 20, justifyContent: 'center', flex: 1 }}>\n        <Text>\n          {sessionError ? `Error: ${sessionError.message}` : 'Loading Apple Intelligence...'}\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ padding: 20, flex: 1 }}>\n      <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 20 }}>\n        Streaming Chat\n      </Text>\n\n      <View style={{\n        flex: 1,\n        borderWidth: 1,\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 20,\n        backgroundColor: '#f5f5f5'\n      }}>\n        <Text>\n          {response || 'AI response will appear here as it streams...'}\n        </Text>\n        {isStreaming && (\n          <Text style={{ fontStyle: 'italic', color: '#666', marginTop: 10 }}>\n            \u25cf Streaming...\n          </Text>\n        )}\n      </View>\n\n      <TextInput\n        style={{\n          borderWidth: 1,\n          padding: 10,\n          marginBottom: 10,\n          borderRadius: 5,\n          minHeight: 80\n        }}\n        value={input}\n        onChangeText={setInput}\n        placeholder=\"Ask something that requires a detailed response...\"\n        multiline\n        editable={!isStreaming}\n      />\n\n      <Button\n        title={isStreaming ? \"Streaming...\" : \"Send\"}\n        onPress={handleStreamingMessage}\n        disabled={isStreaming || !input.trim()}\n      />\n\n      {(streamError || sessionError) && (\n        <Text style={{ color: 'red', marginTop: 10 }}>\n          Error: {streamError?.message || sessionError?.message}\n        </Text>\n      )}\n    </View>\n  );\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);